package com.javarush.telegram;

import com.javarush.telegram.ChatGPTService;
import com.javarush.telegram.DialogMode;
import com.javarush.telegram.MultiSessionTelegramBot;
import com.javarush.telegram.UserInfo;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.ArrayList;

public class TinderBoltApp extends MultiSessionTelegramBot {
    public static final String TELEGRAM_BOT_NAME = "Personal_GPT_Helper_bot"; //TODO: –¥–æ–±–∞–≤—å –∏–º—è –±–æ—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    public static final String TELEGRAM_BOT_TOKEN = "7575830388:AAGPLJKIxVsvv9T1uMIPkTIoIp3u64CzbJM"; //TODO: –¥–æ–±–∞–≤—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    public static final String OPEN_AI_TOKEN = "gpt:y8HQgXidYWEPQ52jBuwnJFkblB3T8AScAHOTiNP46pG97Qae"; //TODO: –¥–æ–±–∞–≤—å —Ç–æ–∫–µ–Ω ChatGPT –≤ –∫–∞–≤—ã—á–∫–∞—Ö

    private final ChatGPTService chatGTP = new ChatGPTService(OPEN_AI_TOKEN);
    private DialogMode currentMode;
    private final ArrayList<String> chatHistory = new ArrayList<>();

    private UserInfo me, she;
    private int questionCount;

    public TinderBoltApp() {
        super(TELEGRAM_BOT_NAME, TELEGRAM_BOT_TOKEN);
        this.currentMode = DialogMode.MAIN;
    }

    @Override
    public void onUpdateEventReceived(Update update) {
        //TODO: –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å
        String message = getMessageText();
        switch (message) {
            case "/start":
                handleStartCommand();
                break;
            case "/gpt":
                switchToGptMode();
                break;
            case "/date":
                switchToDateMode();
                break;
            case "/message":
                switchToMessageMode();
                break;
            case "/opener":
                startOpener();
                break;
            case "/profile":
                startProfile();
                break;
            default:
                handleDefaultMessage(message);
                break;
        }
    }

    private void handleStartCommand() {
        currentMode = DialogMode.MAIN;
        sendPhotoMessage("main");
        sendTextMessage(loadMessage("main"));
        showMainMenu(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞", "/start",
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è \uD83D\uDE0E", "/profile",
                "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ \uD83E\uDD70", "/opener",
                "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ \uD83D\uDE08", "/message",
                "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ \uD83D\uDD25", "/date",
                "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT \uD83E\uDDE0", "/gpt"
        );
    }

    private void switchToGptMode() {
        currentMode = DialogMode.GPT;
        sendPhotoMessage("gpt");
        sendTextMessage(loadMessage("gpt"));
    }

    private void switchToDateMode() {
        currentMode = DialogMode.DATE;
        sendPhotoMessage("date");
        sendTextButtonsMessage(loadMessage("date"),
                "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ","date_grande",
                "–ú–∞—Ä–≥–æ –†–æ–±–±–∏","dare_robbie",
                "–ó–µ–Ω–¥–µ—è","date_zendaya",
                "–†–∞–π–Ω –ì–æ—Å–ª–∏–Ω–≥","date_gosling",
                "–¢–æ–º —Ö–∞—Ä–¥–∏","date_hardy");
    }

    private void switchToMessageMode() {
        currentMode = DialogMode.MESSAGE;
        sendPhotoMessage("message");
        sendTextButtonsMessage("–ü—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç –≤–∞—à—É –ø–µ—Ä–µ–ø–∏—Å–∫—É",
                "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "message_next",
                "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ", "message_date");
    }

    private void startOpener() {
        currentMode = DialogMode.OPENER;
        sendPhotoMessage("opener");
        she = new UserInfo();
        questionCount = 1;
        sendTextMessage("–ò–º—è –¥–µ–≤—É—à–∫–∏?");
    }

    private void startProfile() {
        currentMode = DialogMode.PROFILE;
        sendPhotoMessage("profile");
        me = new UserInfo();
        questionCount = 1;
        sendTextMessage("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
    }

    private void handleDefaultMessage(String message) {
        switch (currentMode) {
            case GPT:
                processGptMessage(message);
                break;
            case MESSAGE:
                processUserChatMessage(message);
                break;
            case DATE:
                processDateMessage(message);
                break;
            case OPENER:
                processOpenerMessage(message);
                break;
            case PROFILE:
                processProfileMessage(message);
                break;
            default:
                showGeneralMessage(message);
                break;
        }
    }

    private void processGptMessage(String userMessage) {
        String gptResponse = chatGTP.sendMessage(loadPrompt("gpt"), userMessage);
        sendTextMessage(gptResponse);
    }

    private void processUserChatMessage(String message) {
        String query = getCallbackQueryButtonKey();
        if (query.startsWith("message_")) {
            String userChatHistory = String.join("\n\n", chatHistory);
            Message waitingMessage = sendTextMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ - ChatGPT –¥—É–º–∞–µ—Ç...");
            String response = chatGTP.sendMessage(loadPrompt(query), userChatHistory);
            updateTextMessage(waitingMessage, response);
        }
        chatHistory.add(message);
    }

    private void processDateMessage(String message) {
        String query = getCallbackQueryButtonKey();
        if (query.startsWith("date_")) {
            sendPhotoMessage(query);
            sendTextMessage("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üíï\n*–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞—á–∏–Ω–∞–π—Ç–µ!*");
            chatGTP.setPrompt(loadPrompt(query));
            return;
        }
        Message waitingMessage = sendTextMessage("–ü–µ—á–∞—Ç–∞–µ—Ç...‚úè");
        String response = chatGTP.addMessage(message);
        updateTextMessage(waitingMessage, response);
    }

    private void processOpenerMessage(String userMessage) {
        switch (questionCount) {
            case 1:
                she.name = userMessage;
                questionCount++;
                sendTextMessage("–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?");
                break;
            case 2:
                she.age = userMessage;
                questionCount++;
                sendTextMessage("–ï—Å—Ç—å –ª–∏ —É –Ω–µ–µ —Ö–æ–±–±–∏ –∏ –∫–∞–∫–∏–µ?");
                break;
            case 3:
                she.hobby = userMessage;
                questionCount++;
                sendTextMessage("–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?");
                break;
            case 4:
                she.occupation = userMessage;
                questionCount++;
                sendTextMessage("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
                break;
            case 5:
                she.goals = userMessage;
                Message msg = sendTextMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ - ChatGPT \uD83E\uDDE0 –¥—É–º–∞–µ—Ç...");
                String answer = chatGTP.sendMessage(loadPrompt("opener"), she.toString());
                updateTextMessage(msg, answer);
                break;
        }
    }

    private void processProfileMessage(String userMessage) {
        switch (questionCount) {
            case 1:
                me.age = userMessage;
                questionCount++;
                sendTextMessage("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç?");
                break;
            case 2:
                me.occupation = userMessage;
                questionCount++;
                sendTextMessage("–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?");
                break;
            case 3:
                me.hobby = userMessage;
                questionCount++;
                sendTextMessage("–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?");
                break;
            case 4:
                me.annoys = userMessage;
                questionCount++;
                sendTextMessage("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
                break;
            case 5:
                me.goals = userMessage;
                Message msg = sendTextMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ - ChatGPT \uD83E\uDDE0 –¥—É–º–∞–µ—Ç...");
                String answer = chatGTP.sendMessage(loadPrompt("profile"), me.toString());
                updateTextMessage(msg, answer);
                break;
        }
    }

    private void showGeneralMessage(String message) {
        sendTextMessage("*Hello!*");
        sendTextMessage("–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: " + "_" + message + "_");

        sendTextButtonsMessage("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
                "Start", "start",
                "Stop", "stop");
    }

    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);
        telegramBotsApi.registerBot(new TinderBoltApp());
    }
}
